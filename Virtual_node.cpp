//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : SAVI/VDCPlanner
//  @ File Name : Virtual_node.cpp
//  @ Date : 17/04/2013
//  @ Author : Maissa Jabri
//
//


#include "Virtual_node.hpp"
#include "Substrate_node.hpp"

Virtual_node::Virtual_node(){
}

Virtual_node::Virtual_node (int id,double cpu,double mem,int type,double bw){
	this->id=id;
	this->cpu=cpu;
	this->memory=mem;
	this->type=type;
	this->bandwidth=bw;
}

Virtual_node::Virtual_node (int id,double cpu,double mem,int type,double bw, int flavor){
	this->id=id;
	this->cpu=cpu;
	this->memory=mem;
	this->type=type;
	this->bandwidth=bw;
	this->flavor = flavor;
}

Virtual_node::Virtual_node (int id,double cpu,double mem,double disk,int type,double bw, int flavor){
	this->id=id;
	this->cpu=cpu;
	this->memory=mem;
	this->disk=disk;
	this->type=type;
	this->bandwidth=bw;
	this->flavor = flavor;
}

Virtual_node::Virtual_node (int id,string name,double cpu,double mem,double disk,int type,double bw, int flavor){
	this->id=id;
	this->name=name;
	this->cpu=cpu;
	this->memory=mem;
	this->disk=disk;
	this->type=type;
	this->bandwidth=bw;
	this->flavor = flavor;
}

void Virtual_node::SetFlavor(int flvr) {
	this->flavor = flvr;
}

int Virtual_node::GetFlavor() {
	return this->flavor;
}

Substrate_node * Virtual_node::GetEmbeddingNode() {
	return this->embeddingNode;
}

void Virtual_node::RemoveEmbeddingNode(){
	this->embeddingNode=NULL;
}

void Virtual_node::SetEmbeddingNode(class Substrate_node * embeddingNode){
	this->embeddingNode=embeddingNode;
}

string Virtual_node::GetEmbeddingNode_name() {
	return this->embeddingNode_name;
}

void Virtual_node::RemoveEmbeddingNode_name(){
	this->embeddingNode_name="NONE";
	cout<<"this->embeddingNode_name = "<<this->embeddingNode_name<<endl;
}

void Virtual_node::SetEmbeddingNode_name(string embeddingNode_name){
	this->embeddingNode_name=embeddingNode_name;
}

string Virtual_node::GetTaskState() {
	return this->task_state;
}

void Virtual_node::CalculateTaskState(){
	//this function communicates wityh the provisionning module
}

void Virtual_node::SetTaskState(string task_state){
	this->task_state=task_state;
}

string Virtual_node::GetPowerState() {
	return this->power_state;
}

void Virtual_node::CalculatePowerState(){
	//this function communicates wityh the provisionning module
}

void Virtual_node::SetPowerState(string power_state){
	this->power_state=power_state;
}

string Virtual_node::GetPublicIp() {
	return this->public_ip;
}

void Virtual_node::CalculatePublicIp(){
	//this function communicates wityh the provisionning module
}

void Virtual_node::SetPublicIp(string public_ip){
	this->public_ip=public_ip;
}

string Virtual_node::GetPrivateIp() {
	return this->private_ip;
}

void Virtual_node::CalculatePrivateIp(){
	//this function communicates wityh the provisionning module
}

void Virtual_node::SetPrivateIp(string private_ip){
	this->private_ip=private_ip;
}

void Virtual_node::CalculateStatus(){
	//this function communicates wityh the provisionning module
}



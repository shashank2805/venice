//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : SAVI/VDCPlanner
//  @ File Name : Request.hpp
//  @ Date : 17/04/2013
//  @ Author : Maissa Jabri
//
//

#if !defined(_REQUEST_H)
#define _REQUEST_H 
#include "Virtual_node.hpp"
#include "Path.hpp"
#include "Priority_group.h"
#include "def.h"
#include "mapping.hpp"
#include "User.h"
#include "Substrate_network.hpp"
#include "Config.h"

class Request {
private:
	int reqNumber;
	string name; // VDC identifier in Openstack -- TODO: not used, remove?
	string userName; // the name given to the vdc by the user
	int type;  // TODO: not used, remove?
	int split;
	time_t arrTime;
	int topo;
	string application;
	double duration;
	double revenue;
	double availability;
	int numberNodes;
	int status;
	std::list<Priority_group> groups;
	std::list<Path> links;
	class mapping* mapping;
	void LoadRequestPoisson(int, char*);

public:
	Request(int reqNumber, int type, int numberNodes, int split, time_t arrTime,
			int topo, double duration, double revenue, double availability);
	Request(void);
	~Request(void);
	string GetName();
	void SetName(string);
	string GetUserName();
	void SetUserName(string);
	int GetRequestNumber();
	void SetRequestNumber(int);
	int GetSplit();
	void SetSplit(int);
	time_t GetArrTime();
	void SetArrTime(time_t);
	int GetTopo();
	void SetTopo(int);
	double GetDuration();
	void SetDuration(double);
	double GetRevenue();
	void SetRevenue(double);
	void CalculateStatus();
	int GetStatus();
	void SetStatus(int);
	void SetApplication(string);
	string GetApplication();
	void IncrementRevenue(double);
	void DecrementRevenue(double);
	double GetAvailability();
	void SetAvailability(double);
	class mapping * GetMapping();
	void SetMapping(class mapping *);
	void FreeMapping(Substrate_network*);
	int GetNumberNodes();
	void SetNumberNodes(int);
	Priority_group* GetGroupById(int);
	Virtual_node* GetNodeById(int);
	std::list<Priority_group> * GetGroups();
	std::list<Path> * GetLinks();
	void DisplayRequest();
};

#endif  //_REQUEST_H

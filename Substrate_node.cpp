//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : SAVI/VDCPlanner
//  @ File Name : Substrate_node.cpp
//  @ Date : 17/04/2013
//  @ Author : Maissa Jabri
//
//

#include "Substrate_node.hpp"

Substrate_node::Substrate_node(int id, double cpu, double mem, int type,
		double bw, int active, double avai) {
	this->id = id;
	this->cpu = cpu;
	this->memory = mem;
	this->bandwidth = bw;
	this->active = active;
	this->availability = avai;
}

Substrate_node::Substrate_node(int id, double cpu, double mem, int type,double bw, int active, string name, double avai) {
	this->id = id;
	this->cpu = cpu;
	this->memory = mem;
	this->type=type;
	this->bandwidth = bw;
	this->active = active;
	this->availability = avai;
	this->name = name;
}

Substrate_node::Substrate_node(int id, double cpu, double mem,double disk, int type,double bw, int active, string name, double avai) {
	this->id = id;
	this->cpu = cpu;
	this->memory = mem;
	this->type=type;
	this->disk = disk;
	this->bandwidth = bw;
	this->active = active;
	this->availability = avai;
	this->name = name;
}

Substrate_node::Substrate_node() {

}
int Substrate_node::GetActive() {
	return this->active;
}

void Substrate_node::SetActive(int active) {
	this->active = active;
}

void Substrate_node::SetAvailability(double availability) {
	this->availability = availability;
}

double Substrate_node::GetAvailability() {
	return this->availability;
}

void Substrate_node::SetName(string name) {
	this->name = name;
}

string Substrate_node::GetName() {
	return this->name;
}

std::list<Virtual_node>* Substrate_node::GetEmbeddedNodes() {
	return &(this->embeddedNodes);
}

std::list<int>* Substrate_node::GetEmbeddedNodes_id() {
	return &(this->embeddedNodes_id);
}

double Substrate_node::GetUsedBandwidth() {
	return 0;
}

double Substrate_node::GetRestBandwidth() {
	double bw = this->bandwidth;
	std::list<Virtual_node>::iterator it1;
	if (this->GetEmbeddedNodes()->empty())
		return bw;
	for (it1 = this->embeddedNodes.begin(); it1 != this->embeddedNodes.end();
			it1++) {
		bw -= it1->GetBandwidth();
	}
	return bw;
}

double Substrate_node::GetUsedMemory() {
	double mem = 0;
	std::list<Virtual_node>::iterator it1;

	if (this->GetEmbeddedNodes()->empty())
		return 0;
	for (it1 = this->embeddedNodes.begin(); it1 != this->embeddedNodes.end();
			it1++) {
		mem += it1->GetMemory();
	}
	return mem;
}

double Substrate_node::GetRestMemory() {
	double mem = this->memory;
	std::list<Virtual_node>::iterator it1;

	if (this->GetEmbeddedNodes()->empty())
		return mem;
	for (it1 = this->embeddedNodes.begin(); it1 != this->embeddedNodes.end();
			it1++) {
		mem -= it1->GetMemory();
	}
	return mem;
}

double Substrate_node::GetUsedCpu() {
	double cpu = 0;
	std::list<Virtual_node>::iterator it1;

	if (this->GetEmbeddedNodes()->empty())
		return 0;
	for (it1 = this->embeddedNodes.begin(); it1 != this->embeddedNodes.end();
			it1++) {
		cpu += it1->GetCpu();
	}
	return cpu;
}

double Substrate_node::GetRestCpu() {
	double cpu = this->cpu;
	std::list<Virtual_node>::iterator it1;

	if (this->GetEmbeddedNodes()->empty())
		return cpu;
	for (it1 = this->embeddedNodes.begin(); it1 != this->embeddedNodes.end();
			it1++) {
		cpu -= it1->GetCpu();
	}
	return cpu;
}

double Substrate_node::GetUsedDisk() {
	double disk = 0;
	std::list<Virtual_node>::iterator it1;

	if (this->GetEmbeddedNodes()->empty())
		return 0;
	for (it1 = this->embeddedNodes.begin(); it1 != this->embeddedNodes.end();
			it1++) {
		disk += it1->GetDisk();
	}
	return disk;
}

double Substrate_node::GetRestDisk() {
	double disk = this->disk;
	std::list<Virtual_node>::iterator it1;

	if (this->GetEmbeddedNodes()->empty())
		return disk;
	for (it1 = this->embeddedNodes.begin(); it1 != this->embeddedNodes.end();
			it1++) {
		disk -= it1->GetDisk();
	}
	return disk;
}

void Substrate_node::DisplayEmdeddedNodes() {
	std::list<Virtual_node>::iterator it1;

	if (this->GetEmbeddedNodes()->empty()) {
		cout << "No embedded nodes for the substrate node with id : "<<this->id<<"\n";
	} else {
		cout << "Embedded nodes for the substrate node with @ : "<<this<<" are\n";
		for (it1 = this->embeddedNodes.begin();
				it1 != this->embeddedNodes.end(); it1++) {
			cout << "** " << it1->GetId() << " \n";
		}
	}
}

void Substrate_node::Display() {
	cout << "id : " << this->id << " type : "<< this->type <<  " mem : " << this->memory
			<< " cpu : " << this->cpu
			<< " bw : " << this->bandwidth
			<< " availability : " << this->availability
			<< "\n";
}
